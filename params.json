{
  "name": "Laravel Crudable",
  "tagline": "Laravel CRUD builder powered by Customs Fields with ease",
  "body": "# Laravel Crudable\r\n\r\n[![Build Status](https://travis-ci.org/AkibaTech/laravel-crudable.svg?branch=master)](https://travis-ci.org/AkibaTech/laravel-crudable) [![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/AkibaTech/laravel-crudable/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/AkibaTech/laravel-crudable/?branch=master) [![SensioLabsInsight](https://insight.sensiolabs.com/projects/bb03f595-0cf6-4003-bab2-9f828e8a421c/mini.png)](https://insight.sensiolabs.com/projects/bb03f595-0cf6-4003-bab2-9f828e8a421c)\r\n\r\nLaravel Crudable is a library built to bring **Custom Fields** powered **CRUD functionnalities** to **your Eloquent models**.  \r\n\r\n- [Goals](#goals)\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [Fields](#fields)\r\n- [Customizing](#customizing)\r\n- [Tests](#tests)\r\n- [Contribute](#contribute)\r\n\r\n## Goals\r\n\r\n- Easy to integrate on a **new project**\r\n- Easy to integrate to an **existing project**\r\n- Non-intrusive API (just add a trait and 2 methods on your model)\r\n- Focus on fields\r\n- Customizable\r\n- Laravel's way\r\n\r\n### Non-goals\r\n\r\n- Roles or permissions\r\n- Admin panel\r\n \r\n## Installation\r\n\r\nInstall via composer:\r\n```bash\r\ncomposer require akibatech/laravel-crudable --dev\r\n```\r\n\r\nThen register the service provider in your `config/app.php`.\r\n```php\r\n// After other service providers\r\nAkibatech\\Crud\\CrudServiceProvider::class\r\n```\r\n\r\nFinally, publish resources:\r\n```bash\r\nphp artisan vendor:publish --tag=crud\r\n```\r\n\r\nThis command will publish language files and views for easy customization.\r\n\r\n## Usage\r\n\r\nAdd the trait `Crudable` to your Eloquent Model, then implement the two required methods `getCrudFields` and `getCrudManager`.  \r\n\r\nExample model:\r\n```php\r\nclass Post extends Model\r\n{\r\n    use Crudable;\r\n    \r\n    /**\r\n     * @return \\Akibatech\\Crud\\Services\\CrudFields\r\n     */\r\n    public function getCrudFields()\r\n    {\r\n        return CrudFields::make([\r\n            // Bind the title model attribute to a TextField, \r\n            // with validations rules and a custom placeholder\r\n            TextField::handle('title', 'required|min:3')->withPlaceholder('The title of the post'),\r\n            \r\n            // Bind the introduction model attribute to a TextareaField\r\n            TextareaField::handle('introduction', 'required|min:3')->withPlaceholder('Short introduction to the post'),\r\n            \r\n            // Bind the content model attribute to a TextareaField\r\n            TextareaField::handle('content', 'required|min:3')\r\n                ->withPlaceholder('Your content !')\r\n                ->withHelp('My custom help')\r\n        ]);\r\n    }\r\n    \r\n    /**\r\n     * @return \\Akibatech\\Crud\\Services\\CrudManager\r\n     */\r\n    public function getCrudManager()\r\n    {\r\n        return CrudManager::make()\r\n            ->setNamePrefix('posts') // All routes names begin with 'posts.'\r\n            ->setUriPrefix('crud/posts') // All routes uris begin with 'crud/posts'\r\n            ->setName('Post'); // Set the name of our model to be \"Post\"\r\n    }\r\n}\r\n```\r\n\r\n### Display the table of entries\r\n\r\nIn your controller:\r\n```php\r\n    public function index()\r\n    {\r\n        $model = App\\Post::class;\r\n        \r\n        return view('your-view', compact($model));\r\n    }\r\n```\r\n\r\nIn your view:\r\n```blade\r\n@crudtable($model)\r\n```\r\n\r\n\r\n\r\nLearn more: [The Table](docs/the_table.md)\r\n\r\n![Entry table](https://github.com/AkibaTech/laravel-crudable/blob/master/resources/screenshot-table.png)\r\n\r\n### Display the entry create form\r\n\r\nIn your controller:\r\n```php\r\n    public function create()\r\n    {\r\n        $model = App\\Post::class;\r\n        \r\n        return view('your-view', compact($model));\r\n    }\r\n    \r\n    public function store(Request $request)\r\n    {\r\n        $entry = (new App\\Post)->crudEntry();\r\n        $validation = $entry->validate($request->all());\r\n        \r\n        if ($validation->passes())\r\n        {\r\n            $validation->save();\r\n        }\r\n        \r\n        // Redirect to the form with the errors if validation fails, or to the index page  \r\n        return $validation->redirect();\r\n    }\r\n```\r\n\r\nIn your view:\r\n```blade\r\n@crudentry($model)\r\n```\r\n\r\nLearn more: [The Entry](https://github.com/AkibaTech/laravel-crudable/blob/master/docs/the_entry.md)\r\n\r\n![Entry form](https://github.com/AkibaTech/laravel-crudable/blob/master/resources/screenshot-create.png)\r\n\r\n### Routes\r\n\r\nIf you don't have a controller with its own routes, you can scaffold them.\r\n\r\n```php\r\n// For example, in AppServiceProvider.php\r\nApp\\Post::crudRoutes(); // Will generate routes for your Eloquent CRUD\r\n```\r\n\r\nLearn more: [Routes and controlllers](https://github.com/AkibaTech/laravel-crudable/blob/master/docs/routes_and_controllers.md)\r\n\r\n## Fields\r\n\r\nFields are the way to bind your **model attributes** to **powerful behaviors** and **reusable view components**.  \r\n\r\nAt this stage, you can use `TextField`, `TextareaField`, `RadioField` and `EmailField`, but many are planned such as `CheckboxField`, `NumberField`, `FileField`, `GoogleMapField`, `MarkdownField` and many others...\r\n\r\nLean more: [Fields](https://github.com/AkibaTech/laravel-crudable/blob/master/docs/fields.md)\r\n\r\n## Controller\r\n\r\nOn a new project, it's handlful to scaffold your CRUD controller who is responsible of our requests and validation.\r\n\r\nYou can generate it with a new command `make:crud:controller`. Just pass to it a controller name and the name of your model.\r\n\r\n```bash\r\nartisan make:crud:controller PostsController Post\r\n```\r\n\r\nThen register the new controller to your model configuration:\r\n```php\r\npublic function getCrudManager()\r\n{\r\n    return CrudManager::make()\r\n            // ...\r\n            ->setController(PostsController);\r\n}\r\n```\r\n\r\nThen, change the view called for the table and the entry to your needs, and finally, register routes as we have seen in [Routes](#routes) section.\r\n\r\nLearn more: [Routes and controlllers](https://github.com/AkibaTech/laravel-crudable/blob/master/docs/routes_and_controllers.md)\r\n\r\n## Customizing\r\n\r\nAll views are customizable and are stored in `resources/views/vendor/crud`.\r\n\r\nComplete documentation: [Customize Views](https://github.com/AkibaTech/laravel-crudable/blob/master/docs/customize_views.md)\r\n\r\n## Tests\r\n\r\nYou can launch tests with\r\n```bash\r\nvendor/bin/phpunit\r\n```\r\n\r\n## Contribute\r\n\r\nFeel free to contribute using issues and pull requests on this repo.\r\n\r\n### Authors\r\n\r\n- [Marceau Casals](https://marceau.casals.fr)\r\n\r\n### Licence\r\n\r\n[The MIT License (MIT)](https://opensource.org/licenses/MIT)\r\nCopyright (c) 2016 Marceau Casals\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}